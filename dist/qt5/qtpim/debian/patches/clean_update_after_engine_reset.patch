=== modified file 'src/imports/contacts/qdeclarativecontactmodel.cpp'
--- a/src/imports/contacts/qdeclarativecontactmodel.cpp	2014-09-24 14:13:01 +0000
+++ b/src/imports/contacts/qdeclarativecontactmodel.cpp	2015-09-17 23:41:03 +0000
@@ -151,7 +151,7 @@
     roleNames.insert(ContactRole, "contact");
     setRoleNames(roleNames);
 
-    connect(this, SIGNAL(managerChanged()), SLOT(doUpdate()));
+    connect(this, SIGNAL(managerChanged()), SLOT(doCleanUpdate()));
     connect(this, SIGNAL(storageLocationsChanged()), SLOT(doUpdate()));
     connect(this, SIGNAL(filterChanged()), SLOT(doUpdate()));
     connect(this, SIGNAL(fetchHintChanged()), SLOT(doUpdate()));
@@ -186,7 +186,7 @@
         delete d->m_manager;
     d->m_manager = new QContactManager(managerName);
 
-    connect(d->m_manager, SIGNAL(dataChanged()), this, SLOT(update()));
+    connect(d->m_manager, SIGNAL(dataChanged()), this, SLOT(doCleanUpdate()));
     connect(d->m_manager, SIGNAL(contactsAdded(QList<QContactId>)), this, SLOT(onContactsAdded(QList<QContactId>)));
     connect(d->m_manager, SIGNAL(contactsRemoved(QList<QContactId>)), this, SLOT(onContactsRemoved(QList<QContactId>)));
     connect(d->m_manager, SIGNAL(contactsChanged(QList<QContactId>)), this, SLOT(onContactsChanged(QList<QContactId>)));
@@ -299,7 +299,7 @@
 {
     if (!d->m_componentCompleted)
         return;
-    QMetaObject::invokeMethod(this, "fetchAgain", Qt::QueuedConnection);
+    QMetaObject::invokeMethod(this, "fetchAgain", Qt::QueuedConnection, Q_ARG(bool, false));
 }
 
 void QDeclarativeContactModel::doUpdate()
@@ -308,6 +308,14 @@
         update();
 }
 
+void QDeclarativeContactModel::doCleanUpdate()
+{
+    if (!d->m_componentCompleted)
+        return;
+
+    QMetaObject::invokeMethod(this, "fetchAgain", Qt::QueuedConnection, Q_ARG(bool, true));
+}
+
 /*!
   \qmlproperty string ContactModel::error
 
@@ -732,7 +740,7 @@
     d->m_contactFetchedMap.clear();
 }
 
-void QDeclarativeContactModel::fetchAgain()
+void QDeclarativeContactModel::fetchAgain(bool clearModel)
 {
     QList<QContactSortOrder> sortOrders;
     foreach (QDeclarativeContactSortOrder* so, d->m_sortOrders) {
@@ -767,6 +775,12 @@
     d->m_pendingRequests.clear();
     d->m_pendingRequests.append(fetchRequest);
 
+    if (clearModel) {
+        beginResetModel();
+        clearContacts();
+        endResetModel();
+    }
+
     // if we have no contacts yet, we can display results as soon as they arrive
     // but if we are updating the model after a sort or filter change, we have to
     // wait for all contacts before processing the update

=== modified file 'src/imports/contacts/qdeclarativecontactmodel_p.h'
--- a/src/imports/contacts/qdeclarativecontactmodel_p.h	2014-05-15 09:27:46 +0000
+++ b/src/imports/contacts/qdeclarativecontactmodel_p.h	2015-09-17 22:27:35 +0000
@@ -175,10 +175,11 @@
 
 private slots:
     void clearContacts();
-    void fetchAgain();
+    void fetchAgain(bool clearModel = false);
     void requestUpdated();
     void fetchRequestStateChanged(QContactAbstractRequest::State newState);
     void doUpdate();
+    void doCleanUpdate();
     void onRequestStateChanged(QContactAbstractRequest::State newState);
     void onContactsAdded(const QList<QContactId>& ids);
     void onContactsRemoved(const QList<QContactId>& ids);

